%pip install seaborn

#Importing the necesseary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#load the dataset
df=pd.read_csv('sales_data.csv')

#display the first few rows
print("First 5 rows of the dataset :")
display(df.head())

#basic information about the dataset
print("\nDataset Information:\n")
df.info()

#DATA CLEANING
#Check for duplicates
duplicates=df.duplicated().sum()
print(f"Number of duplicate rows: {duplicates}")

#remove duplicates
df=df.drop_duplicates()

# Fill missing values with the column mean only for numeric columns
numeric_columns = df.select_dtypes(include=['number']).columns
df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())

print(f"Missing values after cleaning the dataset:\n{df.isnull().sum()}")

#Convert 'Data' column to datetime format
df['Date']=pd.to_datetime(df['Date'])

#to verify the changes
print("\nData after cleaning:")
display(df.head())

#visualisation 1
#plot the trend of sales over the time
plt.figure(figsize=(10,6))
plt.plot(df['Date'], df['Sales'], marker='o', linestyle='-', color='blue')
plt.title('Sales Trend Over Time')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.show()

#visualisation 2
#Scatter plot: Profit VS Discount
plt.figure(figsize=(8,6))
sns.scatterplot(x='Discount',y='Profit',data=df, color='red')
plt.title('Profit VS Discount')
plt.xlabel('Discount')
plt.ylabel('Profit')
plt.show()

#visulaisation 3
#Sales ditribution by region
plt.figure(figsize=(8,6))
region_sales=df.groupby('Region')['Sales'].sum()
region_sales.plot(kind='bar',color='green')
plt.title('Sales by Region')
plt.xlabel('Regions')
plt.ylabel('Total Sales')
plt.show()

#visulaisation 4
#HEATMAP for correlations
import matplotlib.pyplot as plt
import seaborn as sns

# Select only numeric columns
numeric_df = df.select_dtypes(include=['float64', 'int64'])

# Check if numeric_df is empty
if numeric_df.empty:
    print("No numeric columns to compute correlations.")
else:
    # Create the heatmap
    plt.figure(figsize=(10, 6))
    sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
    plt.title('Correlation Matrix')
    plt.show()


from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.linear_model import LinearRegression

#Select the features and the Targets
X=df[['Profit','Discount']]
y=df['Sales']

#Splitting the dataset into training and test data sets
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

#Train the Linear Regression Model
model=LinearRegression()
model.fit(X_train,y_train)

#Make the predictions
y_pred=model.predict(X_test)

#Evaluate the model
print(f"Mean Squared Error: {mean_squared_error(y_test,y_pred):.2f}")
print(f"R-Squared Score: {r2_score(y_test,y_pred):.2f}")
