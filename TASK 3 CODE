%pip install seaborn
# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
# Load the dataset
# Dataset example file: iris.csv

import requests
import pandas as pd

url = "https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"
response = requests.get(url)
if response.status_code == 200:
    with open("iris.csv", "wb") as f:
        f.write(response.content)
    df = pd.read_csv("iris.csv")
    print("Dataset loaded successfully")
else:
    print("Failed to fetch the dataset")

# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
print(df.head())

# Display basic information about the dataset
print("\nDataset Info:")
print(df.info())

# Check for missing values
print("\nMissing Values in Dataset:")
print(df.isnull().sum())
# The dataset contains these columns :
# ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']

# Select relevant columns for clustering
features = df[['sepal_length', 'sepal_width', 'petal_length']]

# Standardize the data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Display the first 5 rows of scaled features
print("\nFirst 5 rows of scaled features:")
print(scaled_features[:5])
# Elbow Method to find the optimal number of clusters
inertia = []
k_range = range(1, 11)

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)

# Plot the Elbow Method graph
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.xticks(k_range)
plt.show()
# Optimal number of clusters determined from the Elbow Method
optimal_k = 3 # Assume k=3 as per the plot

# Perform K-Means Clustering
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
cluster_labels = kmeans.fit_predict(scaled_features)

# Add cluster labels to the original dataset
df['Cluster'] = cluster_labels

# Display the first few rows with cluster labels
print("\nFirst 5 rows with cluster labels:")
print(df.head())
# Visualize clusters (using the first two features for plotting)
plt.figure(figsize=(8, 6))

sns.scatterplot(x=scaled_features[:, 0], y=scaled_features[:, 1], hue=cluster_labels, palette='viridis', s=50)

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', label='Centroids')

plt.title('Customer Segments')
plt.xlabel('Feature 1 (scaled)')
plt.ylabel('Feature 2 (scaled)')
plt.legend()

plt.show()
